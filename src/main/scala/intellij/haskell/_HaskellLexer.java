/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 7, 5]
   * Total runtime size is 2336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<7)|((ch>>5)&0x7f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\u010d\1");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\27\6\1\7\343\6\1\10\12\6\1\11\1\6\1\12\1\6\1\13\1"+
    "\14\1\6\1\15\1\16\33\6\1\17\117\6");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\1\1\4\0\1\1\3\0\1\1\1\3\2\35\1\2\21\0\1\1\1\4\1\72\1\71\1\5\2\73\1\42\1\70"+
    "\1\113\1\114\1\73\1\74\1\115\1\25\1\75\1\73\1\30\4\64\3\33\2\24\1\106\1\116"+
    "\1\77\1\102\1\100\1\101\1\103\1\54\1\57\1\55\1\27\1\37\1\60\1\67\1\51\1\63"+
    "\1\23\1\56\1\47\1\66\1\45\1\34\1\63\1\53\1\62\1\50\1\52\1\46\1\61\1\23\1\32"+
    "\1\65\1\23\1\117\1\21\1\40\1\44\1\41\1\120\1\26\1\123\1\17\1\10\1\11\1\7\1"+
    "\124\1\132\1\6\2\22\1\13\1\130\1\12\1\16\1\127\1\22\1\15\1\14\1\125\1\20\1"+
    "\43\1\131\1\31\1\126\1\22\1\121\1\104\1\122\1\105\6\0\1\36\32\0\1\1\120\0"+
    "\2\22\25\0\2\36\46\0\1\110\1\0\1\111\37\0\1\112\45\0\1\76\36\0\1\107\13\0"+
    "\3\73\66\0\1\73\10\0\1\73\32\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\11\5\1\6\1\7"+
    "\1\10\1\4\1\10\1\11\1\12\1\4\1\13\1\1"+
    "\1\4\2\14\2\4\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\3\5\10\36\5\0\2\4"+
    "\1\5\1\37\1\40\3\5\1\41\4\5\1\42\2\5"+
    "\1\0\1\4\1\0\1\7\2\0\1\4\1\43\1\24"+
    "\1\44\4\0\1\21\1\0\1\45\1\0\1\46\1\23"+
    "\1\25\1\21\1\22\3\0\1\47\1\50\4\5\1\51"+
    "\1\52\1\53\1\0\1\54\3\0\1\55\1\56\6\0"+
    "\1\57\1\60\11\5\1\61\2\5\1\62\1\0\1\62"+
    "\1\0\2\43\1\63\1\64\1\65\37\0\2\66\1\67"+
    "\1\66\4\5\1\70\1\0\1\56\7\0\6\5\1\71"+
    "\1\72\2\5\1\73\1\0\1\74\27\0\2\75\1\76"+
    "\1\77\2\5\1\56\3\0\1\100\6\5\1\101\4\0"+
    "\1\5\1\102\1\0\1\103\1\104\1\5\1\105\4\5"+
    "\5\0\1\106\2\5\1\107\1\5\1\110\4\0\1\111"+
    "\1\0\1\112\25\0\1\113\2\0\1\43\5\0\1\114"+
    "\1\115\1\116\3\0\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\133\0\266\0\u0111\0\u016c\0\u01c7\0\u0222\0\u016c"+
    "\0\u027d\0\u02d8\0\u0333\0\u038e\0\u03e9\0\u0444\0\u049f\0\u04fa"+
    "\0\u0555\0\u05b0\0\u060b\0\u0666\0\u06c1\0\u071c\0\u0777\0\u016c"+
    "\0\u04fa\0\u07d2\0\u082d\0\u0888\0\u08e3\0\u093e\0\u016c\0\u0999"+
    "\0\u09f4\0\u0a4f\0\u07d2\0\u07d2\0\u07d2\0\u0aaa\0\u016c\0\u016c"+
    "\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u0b05\0\u016c"+
    "\0\u0b60\0\u016c\0\u0bbb\0\u0c16\0\u0c71\0\u016c\0\u0ccc\0\u0d27"+
    "\0\u0d82\0\u0ddd\0\u0e38\0\u0e93\0\u0eee\0\u0f49\0\u0fa4\0\u0fff"+
    "\0\u105a\0\u10b5\0\u1110\0\u116b\0\u11c6\0\u04fa\0\u1221\0\u127c"+
    "\0\u12d7\0\u1332\0\u04fa\0\u138d\0\u13e8\0\u1443\0\u149e\0\u04fa"+
    "\0\u14f9\0\u1554\0\u15af\0\u160a\0\u1665\0\u16c0\0\u171b\0\u1776"+
    "\0\u17d1\0\u182c\0\u07d2\0\u016c\0\u1887\0\u18e2\0\u193d\0\u1998"+
    "\0\u19f3\0\u0888\0\u016c\0\u1a4e\0\u016c\0\u07d2\0\u07d2\0\u1aa9"+
    "\0\u1aa9\0\u1b04\0\u0b05\0\u1b5f\0\u016c\0\u1bba\0\u1c15\0\u1c70"+
    "\0\u1ccb\0\u1d26\0\u016c\0\u016c\0\u016c\0\u1d81\0\u016c\0\u1ddc"+
    "\0\u0eee\0\u1e37\0\u016c\0\u1e92\0\u1eed\0\u1f48\0\u1fa3\0\u1ffe"+
    "\0\u2059\0\u20b4\0\u016c\0\u210f\0\u216a\0\u21c5\0\u2220\0\u227b"+
    "\0\u22d6\0\u2331\0\u238c\0\u23e7\0\u2442\0\u04fa\0\u249d\0\u24f8"+
    "\0\u2553\0\u25ae\0\u2609\0\u2609\0\u2664\0\u26bf\0\u1887\0\u18e2"+
    "\0\u016c\0\u271a\0\u2775\0\u27d0\0\u282b\0\u2886\0\u28e1\0\u293c"+
    "\0\u2997\0\u29f2\0\u2a4d\0\u2aa8\0\u2b03\0\u2b5e\0\u2bb9\0\u2c14"+
    "\0\u2c6f\0\u2cca\0\u2d25\0\u2d80\0\u2ddb\0\u2e36\0\u2e91\0\u2eec"+
    "\0\u2f47\0\u2fa2\0\u2ffd\0\u3058\0\u30b3\0\u310e\0\u3169\0\u31c4"+
    "\0\u016c\0\u321f\0\u016c\0\u327a\0\u32d5\0\u3330\0\u338b\0\u33e6"+
    "\0\u016c\0\u3441\0\u349c\0\u34f7\0\u3552\0\u35ad\0\u3608\0\u3663"+
    "\0\u36be\0\u3719\0\u3774\0\u37cf\0\u382a\0\u3885\0\u38e0\0\u393b"+
    "\0\u04fa\0\u04fa\0\u3996\0\u39f1\0\u04fa\0\u3a4c\0\u3aa7\0\u3b02"+
    "\0\u3b5d\0\u3bb8\0\u3c13\0\u3c6e\0\u3cc9\0\u3d24\0\u3d7f\0\u3dda"+
    "\0\u3e35\0\u3e90\0\u3eeb\0\u3f46\0\u3fa1\0\u3ffc\0\u4057\0\u40b2"+
    "\0\u410d\0\u4168\0\u41c3\0\u421e\0\u4279\0\u42d4\0\u016c\0\u432f"+
    "\0\u438a\0\u04fa\0\u43e5\0\u4440\0\u449b\0\u44f6\0\u4551\0\u45ac"+
    "\0\u4607\0\u4662\0\u46bd\0\u4718\0\u4773\0\u47ce\0\u4829\0\u04fa"+
    "\0\u4884\0\u48df\0\u493a\0\u4995\0\u49f0\0\u04fa\0\u4a4b\0\u04fa"+
    "\0\u04fa\0\u4aa6\0\u04fa\0\u4b01\0\u4b5c\0\u4bb7\0\u4c12\0\u4c6d"+
    "\0\u4cc8\0\u4d23\0\u4d7e\0\u4dd9\0\u04fa\0\u4e34\0\u4e8f\0\u04fa"+
    "\0\u4eea\0\u04fa\0\u4f45\0\u4fa0\0\u4ffb\0\u5056\0\u04fa\0\u50b1"+
    "\0\u04fa\0\u510c\0\u5167\0\u51c2\0\u521d\0\u5278\0\u52d3\0\u532e"+
    "\0\u5389\0\u53e4\0\u543f\0\u549a\0\u54f5\0\u5550\0\u55ab\0\u5606"+
    "\0\u5661\0\u56bc\0\u5717\0\u5772\0\u57cd\0\u5828\0\u016c\0\u5883"+
    "\0\u58de\0\u016c\0\u5939\0\u5994\0\u59ef\0\u5a4a\0\u5aa5\0\u016c"+
    "\0\u016c\0\u016c\0\u5b00\0\u5b5b\0\u5bb6\0\u5c11";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\20\1\21\1\22\1\20"+
    "\1\23\1\20\1\24\1\25\1\26\1\20\1\24\1\27"+
    "\1\20\1\24\1\25\1\24\1\6\1\5\1\24\1\30"+
    "\1\31\1\32\1\20\1\32\17\24\1\25\3\24\1\33"+
    "\1\34\2\32\1\35\1\36\1\37\1\40\1\32\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\2\20\1\63\2\20\1\64\1\65\1\20\2\66"+
    "\1\67\22\66\1\70\10\66\1\0\62\66\1\71\13\66"+
    "\1\67\22\66\1\72\10\66\1\0\62\66\1\73\13\66"+
    "\1\67\33\66\1\0\45\66\1\74\12\66\1\75\13\66"+
    "\134\0\2\6\1\0\1\6\30\0\1\6\76\0\2\6"+
    "\1\10\1\6\30\0\1\6\76\0\2\76\1\0\1\76"+
    "\1\32\1\77\1\0\1\100\1\101\6\0\1\102\1\32"+
    "\3\0\1\103\7\0\1\76\4\0\1\32\1\0\1\32"+
    "\25\0\1\104\14\32\31\0\1\105\1\20\1\106\2\20"+
    "\1\107\6\20\1\0\3\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\5\20"+
    "\1\110\2\20\5\0\1\105\10\20\1\111\2\20\1\0"+
    "\3\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\105\3\20"+
    "\1\112\4\20\1\113\2\20\1\0\3\20\1\0\1\114"+
    "\6\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\105\5\20\1\115\5\20"+
    "\1\0\3\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\105"+
    "\3\20\1\116\7\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\3\20\1\117\7\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\105\13\20\1\0"+
    "\3\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\105\1\20"+
    "\1\120\11\20\1\0\3\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\105\5\20\1\121\5\20\1\0\3\20\1\0"+
    "\1\122\6\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\2\123\2\0\1\123\1\124"+
    "\13\123\1\124\3\123\1\124\7\123\2\0\3\123\1\124"+
    "\1\123\1\124\25\123\15\124\14\123\1\125\7\123\5\0"+
    "\1\126\13\24\1\0\3\24\1\0\7\24\2\0\1\24"+
    "\1\0\1\24\1\0\1\24\1\0\24\24\32\0\10\24"+
    "\11\0\1\127\7\0\1\130\2\0\1\25\3\0\1\25"+
    "\2\0\1\25\3\0\1\127\24\0\1\25\53\0\1\32"+
    "\13\0\1\131\2\0\1\25\1\132\2\0\1\25\2\0"+
    "\1\25\6\0\1\32\1\0\1\32\17\0\1\25\5\0"+
    "\6\32\1\133\6\32\13\0\1\134\21\0\1\127\4\0"+
    "\1\135\2\0\1\130\2\0\1\25\3\0\1\25\2\136"+
    "\1\25\1\135\2\0\1\127\24\0\1\25\53\0\1\32"+
    "\13\0\1\32\3\0\1\32\14\0\1\32\1\0\1\32"+
    "\25\0\15\32\24\0\3\137\1\0\15\137\1\140\46\137"+
    "\1\0\15\137\1\141\24\137\3\142\1\143\15\142\1\144"+
    "\47\142\1\143\41\142\5\0\1\32\13\0\1\131\2\0"+
    "\1\25\1\32\2\0\1\25\2\0\1\25\6\0\1\32"+
    "\1\0\1\32\17\0\1\25\5\0\15\32\121\0\1\145"+
    "\42\0\1\32\13\0\1\32\3\0\1\146\14\0\1\32"+
    "\1\0\1\32\25\0\15\32\31\0\1\32\13\20\1\32"+
    "\1\20\2\0\1\32\1\20\2\0\1\20\7\0\1\20"+
    "\1\32\1\20\1\32\25\0\15\32\14\0\10\20\5\0"+
    "\1\32\13\0\1\32\3\0\1\32\14\0\1\32\1\0"+
    "\1\32\25\0\6\32\1\147\6\32\31\0\1\150\13\0"+
    "\1\150\3\0\1\150\14\0\1\150\1\0\1\150\25\0"+
    "\14\150\1\151\32\0\13\152\1\0\2\152\2\0\2\152"+
    "\1\0\2\152\1\0\1\152\2\0\1\152\1\0\1\152"+
    "\1\0\1\152\1\0\17\152\1\0\3\152\5\0\2\153"+
    "\2\0\1\154\2\0\1\155\16\0\10\152\25\0\1\156"+
    "\112\0\1\105\13\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\3\20\1\157\3\20\1\160\5\0\1\105\10\20\1\161"+
    "\2\20\1\0\3\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\105\13\20\1\0\3\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\7\20"+
    "\1\162\3\0\1\66\251\0\1\163\35\0\1\164\227\0"+
    "\1\165\35\0\1\166\145\0\1\167\100\0\13\170\1\0"+
    "\2\170\2\0\2\170\1\0\2\170\1\0\1\170\2\0"+
    "\1\170\1\0\1\170\1\0\1\170\1\0\17\170\1\0"+
    "\3\170\5\0\2\171\2\0\1\172\2\0\1\173\16\0"+
    "\10\170\1\0\2\76\1\0\1\76\1\0\1\77\1\0"+
    "\1\100\1\101\6\0\1\102\14\0\1\76\104\0\1\174"+
    "\2\0\1\175\131\0\1\176\133\0\1\177\1\200\1\0"+
    "\1\201\127\0\1\202\125\0\1\32\13\0\1\32\3\0"+
    "\1\32\14\0\1\32\1\0\1\32\25\0\15\32\13\0"+
    "\1\203\10\0\2\204\2\0\1\204\1\104\13\204\1\104"+
    "\3\204\1\104\14\204\1\104\1\204\1\104\25\204\15\104"+
    "\24\204\5\0\1\105\132\0\1\105\1\20\1\205\4\20"+
    "\1\206\4\20\1\0\3\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\105\13\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\4\20\1\207\3\20\5\0\1\105\7\20\1\210\3\20"+
    "\1\0\3\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\105"+
    "\1\20\1\211\5\20\1\212\3\20\1\0\3\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\105\13\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\1\213\5\20\5\0\1\105"+
    "\6\20\1\214\4\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\13\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\6\20\1\215\1\20\5\0\1\105\13\20\1\0"+
    "\3\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\1\216\5\20\5\0"+
    "\1\105\13\20\1\0\3\20\1\0\1\217\6\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\6\20\1\220\4\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\24\0\1\221\3\0\1\221"+
    "\2\0\1\221\30\0\1\221\53\0\1\32\13\0\1\32"+
    "\2\0\1\221\1\32\2\0\1\221\2\0\1\221\6\0"+
    "\1\32\1\0\1\32\17\0\1\221\5\0\15\32\35\0"+
    "\1\222\12\0\1\221\3\0\1\221\2\0\1\221\30\0"+
    "\1\221\53\0\1\126\151\0\1\223\1\224\2\0\1\223"+
    "\2\0\1\223\30\0\1\223\7\0\1\224\36\0\2\221"+
    "\2\0\31\221\2\0\74\221\2\123\2\0\1\123\1\124"+
    "\13\123\1\124\3\123\1\124\7\123\2\0\3\123\1\124"+
    "\1\123\1\124\25\123\15\124\24\123\2\225\2\0\1\226"+
    "\126\225\30\0\1\227\2\0\1\227\30\0\1\227\55\0"+
    "\3\230\5\0\1\230\4\0\1\230\1\0\3\230\2\0"+
    "\1\230\3\0\1\230\14\0\2\230\1\0\2\230\3\0"+
    "\1\230\36\0\1\230\77\0\1\231\51\0\1\137\2\0"+
    "\1\137\2\0\1\137\1\232\2\0\1\137\2\0\1\233"+
    "\1\0\1\137\1\234\1\233\1\235\1\0\1\233\3\0"+
    "\1\236\2\0\2\137\1\237\1\240\1\241\1\242\1\243"+
    "\1\244\2\0\1\245\1\246\1\0\1\247\1\250\1\244"+
    "\1\241\1\0\1\233\2\0\1\241\2\137\31\0\1\137"+
    "\1\0\1\137\12\0\1\150\13\0\1\150\3\0\1\150"+
    "\14\0\1\150\1\0\1\150\23\0\1\231\1\0\15\150"+
    "\25\0\4\251\2\0\1\142\2\0\1\142\2\0\1\142"+
    "\1\252\2\0\1\142\2\0\1\142\1\0\1\142\1\253"+
    "\1\142\1\254\1\0\1\142\1\0\1\251\1\0\1\255"+
    "\2\0\2\142\1\256\1\257\1\260\1\261\1\262\1\263"+
    "\2\0\1\264\1\265\1\0\1\266\1\267\1\263\1\260"+
    "\1\0\1\142\2\0\1\260\2\142\31\0\1\142\1\0"+
    "\1\142\12\0\1\150\13\0\1\150\3\0\1\150\14\0"+
    "\1\150\1\0\1\150\25\0\15\150\31\0\1\270\13\152"+
    "\1\0\3\152\1\0\7\152\2\0\1\152\1\0\1\152"+
    "\1\0\1\152\1\0\24\152\4\0\2\153\2\0\1\154"+
    "\2\0\1\155\16\0\10\152\6\0\13\152\1\0\1\152"+
    "\3\0\1\152\2\0\1\152\7\0\1\152\1\0\1\152"+
    "\57\0\10\152\2\271\1\272\2\271\1\273\76\271\1\274"+
    "\15\271\1\0\10\271\5\0\1\105\13\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\4\20\1\275\3\20\5\0\1\105"+
    "\3\20\1\276\7\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\2\20\1\277\10\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\105\3\20\1\300"+
    "\7\20\1\0\3\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\104\0"+
    "\1\301\33\0\1\302\13\170\1\0\3\170\1\0\7\170"+
    "\2\0\1\170\1\0\1\170\1\0\1\170\1\0\24\170"+
    "\4\0\2\171\2\0\1\172\2\0\1\173\16\0\10\170"+
    "\6\0\13\170\1\0\1\170\3\0\1\170\2\0\1\170"+
    "\7\0\1\170\1\0\1\170\57\0\10\170\2\174\2\0"+
    "\15\174\1\303\111\174\17\0\1\304\122\0\1\305\133\0"+
    "\1\306\130\0\1\307\5\0\1\310\133\0\1\311\125\0"+
    "\1\312\122\0\2\204\2\0\127\204\5\0\1\105\1\313"+
    "\12\20\1\0\3\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\105\13\20\1\0\3\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\1\314\5\20\5\0\1\105\10\20\1\315\2\20\1\0"+
    "\3\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\105\3\20"+
    "\1\316\7\20\1\0\3\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\105\13\20\1\0\3\20\1\0\1\317\6\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\10\20\5\0\1\105\1\320\12\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\105\13\20\1\0"+
    "\3\20\1\0\1\321\6\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\105"+
    "\3\20\1\322\7\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\13\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\1\323\5\20\5\0\1\105\6\20\1\324"+
    "\4\20\1\0\3\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\105\3\20\1\325\7\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\10\20\11\0\1\127\12\0\1\221\3\0\1\221"+
    "\2\0\1\221\3\0\1\127\24\0\1\221\172\0\1\326"+
    "\32\0\1\223\3\0\1\223\2\0\1\223\30\0\1\223"+
    "\46\0\2\225\2\0\131\225\2\0\40\225\1\327\37\225"+
    "\1\327\26\225\30\0\1\330\2\0\1\330\30\0\1\330"+
    "\72\0\1\233\3\0\1\233\2\0\1\233\30\0\1\233"+
    "\3\0\1\231\101\0\1\331\7\0\1\332\5\0\1\333"+
    "\64\0\3\334\5\0\1\334\4\0\1\334\1\0\3\334"+
    "\2\0\1\334\3\0\1\334\14\0\2\334\1\0\2\334"+
    "\3\0\1\334\36\0\1\334\43\0\1\244\10\0\1\335"+
    "\2\0\1\336\1\0\1\337\13\0\1\137\65\0\1\137"+
    "\1\0\1\137\3\0\1\137\2\0\1\137\1\0\1\137"+
    "\2\0\3\137\2\0\20\137\1\0\3\137\13\0\1\137"+
    "\13\0\1\137\61\0\1\331\5\0\1\340\126\0\1\137"+
    "\142\0\1\137\106\0\1\341\11\0\1\342\3\0\1\343"+
    "\10\0\1\137\1\0\1\344\117\0\1\137\135\0\1\340"+
    "\131\0\1\344\5\0\1\137\107\0\1\331\10\0\1\137"+
    "\132\0\1\137\7\0\1\137\53\0\4\251\14\0\1\142"+
    "\13\0\1\251\125\0\1\142\2\0\1\142\30\0\1\142"+
    "\105\0\1\345\7\0\1\346\5\0\1\347\64\0\3\142"+
    "\5\0\1\142\4\0\1\142\1\0\3\142\2\0\1\142"+
    "\3\0\1\142\14\0\2\142\1\0\2\142\3\0\1\142"+
    "\36\0\1\142\43\0\1\263\10\0\1\350\2\0\1\351"+
    "\1\0\1\352\13\0\1\142\65\0\1\142\1\0\1\142"+
    "\3\0\1\142\2\0\1\142\1\0\1\142\2\0\3\142"+
    "\2\0\20\142\1\0\3\142\13\0\1\142\13\0\1\142"+
    "\61\0\1\345\5\0\1\353\126\0\1\142\142\0\1\142"+
    "\106\0\1\142\11\0\1\354\3\0\1\355\10\0\1\142"+
    "\1\0\1\356\117\0\1\142\135\0\1\353\131\0\1\356"+
    "\5\0\1\142\107\0\1\345\10\0\1\142\132\0\1\142"+
    "\7\0\1\142\57\0\1\270\13\152\1\0\2\152\2\0"+
    "\2\152\1\0\2\152\1\0\1\152\2\0\1\152\1\0"+
    "\1\152\1\0\1\152\1\0\17\152\1\0\3\152\5\0"+
    "\2\153\2\0\1\154\2\0\1\155\16\0\10\152\3\0"+
    "\1\271\127\0\2\357\1\360\2\357\1\0\114\357\1\0"+
    "\10\357\5\0\1\105\3\20\1\361\7\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\105\4\20\1\362"+
    "\6\20\1\0\3\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\105\12\20\1\363\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\7\20\1\364\3\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\302\13\170\1\0"+
    "\2\170\2\0\2\170\1\0\2\170\1\0\1\170\2\0"+
    "\1\170\1\0\1\170\1\0\1\170\1\0\17\170\1\0"+
    "\3\170\5\0\2\171\2\0\1\172\2\0\1\173\16\0"+
    "\10\170\2\174\1\365\16\174\1\303\111\174\13\0\1\366"+
    "\125\0\1\367\132\0\1\307\133\0\1\174\134\0\1\174"+
    "\137\0\1\370\125\0\1\307\126\0\1\105\13\20\1\0"+
    "\3\20\1\0\3\20\1\371\3\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\105\13\20\1\0\3\20\1\0\1\372\6\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\7\20\1\373\3\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\105\1\374\12\20"+
    "\1\0\3\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\105"+
    "\12\20\1\375\1\0\3\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\105\13\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\376\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\13\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\3\20\1\377\4\20\5\0\1\105\6\20\1\u0100"+
    "\4\20\1\0\3\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\6\0"+
    "\1\u0101\124\0\2\327\1\u0102\1\u0103\127\327\30\0\1\330"+
    "\2\0\1\330\30\0\1\330\3\0\1\231\111\0\1\137"+
    "\122\0\1\137\157\0\1\137\55\0\3\334\5\0\1\334"+
    "\4\0\1\334\1\0\3\334\2\0\1\334\3\0\1\334"+
    "\14\0\2\334\1\0\2\334\3\0\1\334\3\0\1\231"+
    "\32\0\1\334\62\0\1\137\134\0\1\137\107\0\1\137"+
    "\24\0\1\137\131\0\1\137\125\0\1\137\16\0\1\231"+
    "\121\0\1\137\105\0\1\137\145\0\1\137\134\0\1\142"+
    "\122\0\1\142\157\0\1\142\121\0\1\142\134\0\1\142"+
    "\107\0\1\142\24\0\1\142\131\0\1\142\133\0\1\142"+
    "\105\0\1\142\145\0\1\142\70\0\1\357\133\0\1\u0104"+
    "\1\105\13\20\1\0\3\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\105\5\20\1\u0105\5\20\1\0\3\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\105\3\20\1\u0106\7\20"+
    "\1\0\3\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\2\174\1\0"+
    "\16\174\1\303\111\174\20\0\1\u0107\124\0\1\310\135\0"+
    "\1\174\122\0\1\105\5\20\1\u0108\1\20\1\u0109\3\20"+
    "\1\0\3\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\105"+
    "\4\20\1\u010a\6\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\13\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\1\u010b\5\20\5\0\1\105\13\20\1\0"+
    "\3\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\1\20\1\u010c\6\20\5\0"+
    "\1\105\5\20\1\u010d\5\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\10\20\5\0\1\105\1\u010e\12\20\1\0\3\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\105\13\20\1\0"+
    "\3\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\4\20\1\u010f\3\20\12\0"+
    "\1\u0110\121\0\4\u0103\14\0\1\u0111\3\0\1\u0112\7\0"+
    "\1\u0103\76\0\2\u0103\1\0\1\u0103\14\0\1\u0111\3\0"+
    "\1\u0112\7\0\1\u0103\103\0\1\u0113\1\u0114\130\0\1\105"+
    "\3\20\1\u0115\7\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\10\0\1\310\127\0\1\105\11\20\1\u0116\1\20"+
    "\1\0\3\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\105"+
    "\4\20\1\u0117\6\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\13\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\1\u0118\5\20\5\0\1\105\4\20\1\u0119"+
    "\6\20\1\0\3\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\105\3\20\1\u011a\7\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\10\20\121\0\1\u011b\134\0\1\u011c\34\0\1\327"+
    "\117\0\1\u011d\146\0\1\u011e\111\0\1\105\3\20\1\u011f"+
    "\7\20\1\0\3\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\4\0"+
    "\1\u0120\1\105\13\20\1\0\3\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\105\13\20\1\0\3\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\1\20\1\u0121\6\20\17\0\1\u0122\124\0\1\u0123"+
    "\135\0\1\u0124\246\0\1\u0125\10\0\1\u0126\2\0\1\u0127"+
    "\137\0\1\u0128\240\0\1\u0129\133\0\1\u012a\13\0\1\u012b"+
    "\254\0\1\u012c\33\0\1\u012d\111\0\1\u012e\130\0\1\u012f"+
    "\152\0\1\u0130\117\0\1\u0131\246\0\1\u0132\132\0\1\u0133"+
    "\14\0\1\u0134\133\0\1\u0135\132\0\1\u0136\246\0\1\u0137"+
    "\22\0\1\u0138\132\0\1\u0139\236\0\1\u013a\131\0\1\u013b"+
    "\30\0\1\u013c\130\0\1\u013d\132\0\1\u013e\134\0\1\u013f"+
    "\124\0\1\u0140\246\0\1\u0141\132\0\1\u0142\23\0\1\u0143"+
    "\124\0\1\u0144\133\0\1\u0145\243\0\1\u0146\12\0\1\u0102"+
    "\1\u0103\127\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\17\1\1\11\6\1\1\11"+
    "\7\1\10\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\7\1\5\0\20\1\1\0\1\1\1\0\1\1\2\0"+
    "\3\1\1\11\4\0\1\1\1\0\1\11\1\0\1\11"+
    "\4\1\3\0\1\11\5\1\3\11\1\0\1\11\3\0"+
    "\1\11\1\1\6\0\1\11\16\1\1\0\1\1\1\0"+
    "\4\1\1\11\37\0\1\11\1\1\1\11\5\1\1\11"+
    "\1\0\1\1\7\0\13\1\1\0\1\1\27\0\1\11"+
    "\6\1\3\0\10\1\4\0\2\1\1\0\10\1\5\0"+
    "\6\1\4\0\1\1\1\0\1\1\25\0\1\11\2\0"+
    "\1\11\5\0\3\11\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }
    private int commentStart;
    private int commentDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case NCOMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NCOMMENT;
            }
            case 327: break;
            case NHADDOCK: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NHADDOCK;
            }
            case 328: break;
            case QQ: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_QUASIQUOTE;
            }
            case 329: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 79: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 80: break;
          case 3: 
            { return HS_NEWLINE;
            }
          case 81: break;
          case 4: 
            { return HS_VARSYM_ID;
            }
          case 82: break;
          case 5: 
            { return HS_VAR_ID;
            }
          case 83: break;
          case 6: 
            { return HS_BACKSLASH;
            }
          case 84: break;
          case 7: 
            { return HS_CON_ID;
            }
          case 85: break;
          case 8: 
            { return HS_DECIMAL;
            }
          case 86: break;
          case 9: 
            { return HS_RIGHT_BRACKET;
            }
          case 87: break;
          case 10: 
            { return HS_UNDERSCORE;
            }
          case 88: break;
          case 11: 
            { return HS_QUOTE;
            }
          case 89: break;
          case 12: 
            { return HS_DOT;
            }
          case 90: break;
          case 13: 
            { return HS_EQUAL;
            }
          case 91: break;
          case 14: 
            { return HS_AT;
            }
          case 92: break;
          case 15: 
            { return HS_VERTICAL_BAR;
            }
          case 93: break;
          case 16: 
            { return HS_TILDE;
            }
          case 94: break;
          case 17: 
            { return HS_CONSYM_ID;
            }
          case 95: break;
          case 18: 
            { return HS_COLON_COLON;
            }
          case 96: break;
          case 19: 
            { return HS_LEFT_ARROW;
            }
          case 97: break;
          case 20: 
            { return HS_RIGHT_ARROW;
            }
          case 98: break;
          case 21: 
            { return HS_DOUBLE_RIGHT_ARROW;
            }
          case 99: break;
          case 22: 
            { return HS_LEFT_PAREN;
            }
          case 100: break;
          case 23: 
            { return HS_RIGHT_PAREN;
            }
          case 101: break;
          case 24: 
            { return HS_COMMA;
            }
          case 102: break;
          case 25: 
            { return HS_SEMICOLON;
            }
          case 103: break;
          case 26: 
            { return HS_LEFT_BRACKET;
            }
          case 104: break;
          case 27: 
            { return HS_BACKQUOTE;
            }
          case 105: break;
          case 28: 
            { return HS_LEFT_BRACE;
            }
          case 106: break;
          case 29: 
            { return HS_RIGHT_BRACE;
            }
          case 107: break;
          case 30: 
            { 
            }
          case 108: break;
          case 31: 
            { return HS_IF;
            }
          case 109: break;
          case 32: 
            { return HS_IN;
            }
          case 110: break;
          case 33: 
            { return HS_DO;
            }
          case 111: break;
          case 34: 
            { return HS_OF;
            }
          case 112: break;
          case 35: 
            { return HS_COMMENT;
            }
          case 113: break;
          case 36: 
            { return HS_NCOMMENT_END;
            }
          case 114: break;
          case 37: 
            { return HS_STRING_LITERAL;
            }
          case 115: break;
          case 38: 
            { return HS_DOT_DOT;
            }
          case 116: break;
          case 39: 
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            }
          case 117: break;
          case 40: 
            { return HS_NCOMMENT_START;
            }
          case 118: break;
          case 41: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            }
          case 119: break;
          case 42: 
            { commentDepth++;
            }
          case 120: break;
          case 43: 
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            }
          case 121: break;
          case 44: 
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            }
          case 122: break;
          case 45: 
            { qqDepth++;
            }
          case 123: break;
          case 46: 
            { return HS_DIRECTIVE;
            }
          case 124: break;
          case 47: 
            { return HS_PRAGMA_END;
            }
          case 125: break;
          case 48: 
            { return HS_SHEBANG_LINE;
            }
          case 126: break;
          case 49: 
            { return HS_LET;
            }
          case 127: break;
          case 50: 
            { return HS_FLOAT;
            }
          case 128: break;
          case 51: 
            { return HS_OCTAL;
            }
          case 129: break;
          case 52: 
            { return HS_HEXADECIMAL;
            }
          case 130: break;
          case 53: 
            { return HS_CHARACTER_LITERAL;
            }
          case 131: break;
          case 54: 
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          case 132: break;
          case 55: 
            { return HS_PRAGMA_START;
            }
          case 133: break;
          case 56: 
            { haddockDepth++;
            }
          case 134: break;
          case 57: 
            { return HS_DATA;
            }
          case 135: break;
          case 58: 
            { return HS_ELSE;
            }
          case 136: break;
          case 59: 
            { return HS_CASE;
            }
          case 137: break;
          case 60: 
            { return HS_HADDOCK;
            }
          case 138: break;
          case 61: 
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            }
          case 139: break;
          case 62: 
            { return HS_TYPE;
            }
          case 140: break;
          case 63: 
            { return HS_THEN;
            }
          case 141: break;
          case 64: 
            { return HS_INFIX;
            }
          case 142: break;
          case 65: 
            { return HS_CLASS;
            }
          case 143: break;
          case 66: 
            { return HS_WHERE;
            }
          case 144: break;
          case 67: 
            { return HS_INFIXL;
            }
          case 145: break;
          case 68: 
            { return HS_INFIXR;
            }
          case 146: break;
          case 69: 
            { return HS_IMPORT;
            }
          case 147: break;
          case 70: 
            { return HS_MODULE;
            }
          case 148: break;
          case 71: 
            { return HS_DEFAULT;
            }
          case 149: break;
          case 72: 
            { return HS_NEWTYPE;
            }
          case 150: break;
          case 73: 
            { return HS_INSTANCE;
            }
          case 151: break;
          case 74: 
            { return HS_DERIVING;
            }
          case 152: break;
          case 75: 
            { return HS_TYPE_FAMILY;
            }
          case 153: break;
          case 76: 
            { return HS_TYPE_INSTANCE;
            }
          case 154: break;
          case 77: 
            { return HS_FOREIGN_IMPORT;
            }
          case 155: break;
          case 78: 
            { return HS_FOREIGN_EXPORT;
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
